using System;

namespace Test
{
    class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public virtual void Work()
        {
            Console.WriteLine("It works...");
        }
    }
    class Student: Person
    {
        public override void Work()
        {
            Console.WriteLine("It studies...");
        }
    }
    class Employee : Person
    {
        public double Salary { get; set; }
        public string Designation { get; set; }
        public override void Work()
        {
            Console.WriteLine("It earns...");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Person p1 = new Employee();
            p1.Work();
            Console.WriteLine("===============");
            p1 = new Student();
            p1.Work();
        }
    }
}

===
It earns...
===============
It studies...
===

using System;

namespace Test
{
    class Length
    {
        int feet, inch;
        public Length()
        {
            this.feet = 0;
            this.inch = 0;
        }
        public Length(int feet, int inch)
        {
            this.feet = feet;
            this.inch = inch;
        }
        public static Length operator +(Length l1, Length l2)
        {
            Length l3 = new Length();
            l3.feet = l1.feet + l2.feet;
            l3.inch = l1.inch + l2.inch;
            if (l3.inch > 12)
            {
                l3.feet++;
                l3.inch -= 12;
            }
            return l3;
        }
        public static bool operator >(Length l1, Length l2)
        {
            if (l1.feet > l2.feet)
                return true;
            else if (l1.feet == l2.feet)
            {
                if (l1.inch > l2.inch)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        public static bool operator <(Length l1, Length l2)
        {
            if (l1.feet < l2.feet)
                return true;
            else if (l1.feet == l2.feet)
            {
                if (l1.inch < l2.inch)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        public override string ToString()
        {
            return string.Format("{0}' {1}\"", feet, inch);
        }
        static void Main(string[] args)
        {
            Length len1 = new Length(2, 8);
            Length len2 = new Length(4, 5);
            Length len3 = len1 + len2;

            Console.WriteLine(len1);
            
        }
    }
}
===
2' 8"
===


using System;

namespace Test
{
    class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public virtual void Work()
        {
            Console.WriteLine("It works...");
        }
    }
    class Student : Person
    {
        public override void Work()
        {
            Console.WriteLine("It studies...");
        }
    }
    class Employee : Person
    {
        public double Salary { get; set; }
        public string Designation { get; set; }
        public override void Work()
        {
            Console.WriteLine("It earns...");
        }
    }
    class Manager : Employee
    {
        public sealed override void Work()
        {
            Console.WriteLine("It manages a team...");
        }
    }
    class BranchManager: Manager
    {

    }
    class Program
    {
        static void Main(string[] args)
        {
            Person p1 = new Employee();
            p1.Work();
            Console.WriteLine("===============");
            p1 = new Student();
            p1.Work();
            Console.WriteLine("===============");
            p1 = new Manager();
            p1.Work();
            Console.WriteLine("===============");
            p1 = new BranchManager();
            p1.Work();
        }
    }
}


===
It earns...
===============
It studies...
===============
It manages a team...
===============
It manages a team...
===
